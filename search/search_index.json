{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to KSMC-TS Docs","title":"Home"},{"location":"index.html#welcome-to-ksmc-ts-docs","text":"","title":"Welcome to KSMC-TS Docs"},{"location":"fortinet/AutomatedCertificateRenewal/index.html","text":"Automated Certificate Renewal on Fortigate Firewalls Prerequisites DNS is hosted with one of the following providers: docs.certifytheweb.com/docs/dns/validation . This guide will cover setup with Cloudflare. Refer to CertifyTheWeb's documentation for setup with other providers. A server that you can run the CertifyTheWeb service on. That same server will need access to the Fortigate firewall via HTTPS. Save and Edit Script Download the script that will perform the automated certificate renewal from Github to the workstation/server that you will run the script and renewal process from. Invoke-RestMethod -Method Get ` -Uri \"https://raw.githubusercontent.com/KSMC-TS/letsencrypt-scripts/main/certify/Install-LECertify-Fortigate.ps1\" ` -OutFile \"C:\\Scripts\\Install-LECertify-Fortigate.ps1\" Edit the script to update the $fortigateAddress variable to the FQDN or IP address used to access the Fortigate firewall. Edit the script to update the $fortigateAdminPort variable to the port used to access the web interface of the admin page. Edit the script to update the $encryptedToken to the path to the encrypted API token file (creating this file will be covered). Save the changes to the script. Install and Configure Certify The Web Download and install Certify The Web on the server you will be running the script on. Certify The Web can be downloaded here . Login to Cloudflare and navigate to My Profile . Select API Tokens and then Create Token . Leverage the API token templates to create a template for Edit zone DNS . Edit the Token name , Permissions , Zone Resources , IP Address Filtering , and TTL appropriately. Limit the zone to the specific DNS zone and limit the IP address to the public address of the server you will be running CertifyTheWeb from. Validate the options and Create Token . Save the API token created for use with CertifyTheWeb in the coming steps. This will only be shown once so make sure to copy it but protect this token as it grants anyone with access permission to make DNS changes within the permissions set earlier. Lauch Certify The Web and create a New Certificate . Choose Let's Encrypt as the Certificate Authority and an email to receive certificate related notifications at. Choose a name for the certificate, then Add domains to certificate . Once all the appropriate domains have been added, you can continue on to Authorization . Select dns-01 for the Challenge Type . Select the DNS Update Method . For this example, we'll be using Cloudflare. Select New on the credentials field. Choose a Credential Name and enter the API Token . Back on Cloudflare, navigate to the domain's Overview page and scroll down to the API field on the right. Copy the Zone ID and paste into the DNS Zone Id field in Certify The Web. Within Certify The Web, you can move to the Deployment section and select Deployment Tasks . Under this section, select Add to configure the post-deployment Powershell script. Select Run Powershell Script . On the next page, the General Settings as the defaults will work. Select Task Parameters and enter the path to the script saved from Github in the earlier section. Click Save on the new certificate dialog. Create Fortigate API Token Login to the Fortigate and navigate to System , then Admin Profiles . Create a new profile with Read/Write access to the System and VPN . Save this profile. Navigate to the Administrators blade and create a new REST API Admin . Select a username and the administrator profile just created. Turn off PKI Group . Enter the IP address of the server running the script and Certify The Web renewal in the Trusted Hosts field. When you create this administrator, you will be taken to a page that has the API key for that user. Note this API key as it will be used in the next section and is only shown once. Encrypt Fortigate API Token To encrypt the token, you will need to leverage PsExec to run Powershell in the SYSTEM context. PsExec can be downloaded from here . Once downloaded and extracted, launch a Powershell window as an administrator. Run .\\PsExec.exe -s powershell.exe . This should launch a Powershell session as the SYSTEM user. Run the following commands where apitoken is the token created in the previous section and tokenfile.txt is the token file specified in the first section. $token = Read-Host -AsSecureString $tokenFile = ConvertFrom-SecureString -SecureString $token -Key (1..16) $tokenFile | Set-Content \"C:\\scripts\\tokenfile.txt\" Request Certificate and Validate Installation On Certify The Web, you can select the certificate that was created earlier on and select Request Certificate . This will immediately request a new certificate and go through the process of issuing the certificate and applying to the administrative interface and VPN interface of the Fortigate. Any issues with the script will show up in the Certify The Web log files. You can validate installation by attempting to navigate to the administrative or VPN interfaces of the Fortigate. Certify The Web will automatically handle any renewals required for the certificate. Certify The Web can be set to issue certificates during certain hours by disabling and enabling the service but that is outside of the scope of this guide.","title":"Automated Certificate Renewal"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#automated-certificate-renewal-on-fortigate-firewalls","text":"","title":"Automated Certificate Renewal on Fortigate Firewalls"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#prerequisites","text":"DNS is hosted with one of the following providers: docs.certifytheweb.com/docs/dns/validation . This guide will cover setup with Cloudflare. Refer to CertifyTheWeb's documentation for setup with other providers. A server that you can run the CertifyTheWeb service on. That same server will need access to the Fortigate firewall via HTTPS.","title":"Prerequisites"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#save-and-edit-script","text":"Download the script that will perform the automated certificate renewal from Github to the workstation/server that you will run the script and renewal process from. Invoke-RestMethod -Method Get ` -Uri \"https://raw.githubusercontent.com/KSMC-TS/letsencrypt-scripts/main/certify/Install-LECertify-Fortigate.ps1\" ` -OutFile \"C:\\Scripts\\Install-LECertify-Fortigate.ps1\" Edit the script to update the $fortigateAddress variable to the FQDN or IP address used to access the Fortigate firewall. Edit the script to update the $fortigateAdminPort variable to the port used to access the web interface of the admin page. Edit the script to update the $encryptedToken to the path to the encrypted API token file (creating this file will be covered). Save the changes to the script.","title":"Save and Edit Script"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#install-and-configure-certify-the-web","text":"Download and install Certify The Web on the server you will be running the script on. Certify The Web can be downloaded here . Login to Cloudflare and navigate to My Profile . Select API Tokens and then Create Token . Leverage the API token templates to create a template for Edit zone DNS . Edit the Token name , Permissions , Zone Resources , IP Address Filtering , and TTL appropriately. Limit the zone to the specific DNS zone and limit the IP address to the public address of the server you will be running CertifyTheWeb from. Validate the options and Create Token . Save the API token created for use with CertifyTheWeb in the coming steps. This will only be shown once so make sure to copy it but protect this token as it grants anyone with access permission to make DNS changes within the permissions set earlier. Lauch Certify The Web and create a New Certificate . Choose Let's Encrypt as the Certificate Authority and an email to receive certificate related notifications at. Choose a name for the certificate, then Add domains to certificate . Once all the appropriate domains have been added, you can continue on to Authorization . Select dns-01 for the Challenge Type . Select the DNS Update Method . For this example, we'll be using Cloudflare. Select New on the credentials field. Choose a Credential Name and enter the API Token . Back on Cloudflare, navigate to the domain's Overview page and scroll down to the API field on the right. Copy the Zone ID and paste into the DNS Zone Id field in Certify The Web. Within Certify The Web, you can move to the Deployment section and select Deployment Tasks . Under this section, select Add to configure the post-deployment Powershell script. Select Run Powershell Script . On the next page, the General Settings as the defaults will work. Select Task Parameters and enter the path to the script saved from Github in the earlier section. Click Save on the new certificate dialog.","title":"Install and Configure Certify The Web"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#create-fortigate-api-token","text":"Login to the Fortigate and navigate to System , then Admin Profiles . Create a new profile with Read/Write access to the System and VPN . Save this profile. Navigate to the Administrators blade and create a new REST API Admin . Select a username and the administrator profile just created. Turn off PKI Group . Enter the IP address of the server running the script and Certify The Web renewal in the Trusted Hosts field. When you create this administrator, you will be taken to a page that has the API key for that user. Note this API key as it will be used in the next section and is only shown once.","title":"Create Fortigate API Token"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#encrypt-fortigate-api-token","text":"To encrypt the token, you will need to leverage PsExec to run Powershell in the SYSTEM context. PsExec can be downloaded from here . Once downloaded and extracted, launch a Powershell window as an administrator. Run .\\PsExec.exe -s powershell.exe . This should launch a Powershell session as the SYSTEM user. Run the following commands where apitoken is the token created in the previous section and tokenfile.txt is the token file specified in the first section. $token = Read-Host -AsSecureString $tokenFile = ConvertFrom-SecureString -SecureString $token -Key (1..16) $tokenFile | Set-Content \"C:\\scripts\\tokenfile.txt\"","title":"Encrypt Fortigate API Token"},{"location":"fortinet/AutomatedCertificateRenewal/index.html#request-certificate-and-validate-installation","text":"On Certify The Web, you can select the certificate that was created earlier on and select Request Certificate . This will immediately request a new certificate and go through the process of issuing the certificate and applying to the administrative interface and VPN interface of the Fortigate. Any issues with the script will show up in the Certify The Web log files. You can validate installation by attempting to navigate to the administrative or VPN interfaces of the Fortigate. Certify The Web will automatically handle any renewals required for the certificate. Certify The Web can be set to issue certificates during certain hours by disabling and enabling the service but that is outside of the scope of this guide.","title":"Request Certificate and Validate Installation"},{"location":"intune/CreateAppDeploymentMsi/index.html","text":"Create Intune App Deployment Windows MSI Prerequisites: Access to Windows MSI installer via URL or a local copy Determine distribution method: Download from web (downloadUrl) This requires a publicly accessible web URL that the MSI package is available at. This allows for the MSI to be updated without needing to rebuild the deployment package. You aren't able to take advantage of some of the features such as Delivery Optimization: https://oliverkieselbach.com/2020/03/07/delivery-optimization-with-intune-and-microsoft-connected-cache-mcc/ Bundled in deployment package (packagedInstaller) This requires the deployment package be build with the MSI in the same directory as the script. Package will need to be recreated on updates. More frequent updates required. You are able to leverage Delivery Optimization. Build the deployment package Download the script if you don't already from https://raw.githubusercontent.com/zchoate/Intune-Applications/main/Install-Msi.ps1. Invoke-RestMethod -Uri \"https://raw.githubusercontent.com/zchoate/Intune-Applications/main/Install-Msi.ps1\" -OutFile \"$env:UserProfile\\Downloads\\Deployment\\Install-Msi.ps1\" Download the Intune package tool and unzip: https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/archive/v1.8.1.zip. This can be saved to any accessible directory. If you're going with the PackagedInstaller option, download your installer and place in the same directory as the Install-Msi.ps1 script. This should only contain these 2 files. Run the Intune package tool in the terminal. You'll need to specify the following information: -c <setup_folder> -s <source_setup_file> -o <output_folder> -q to overwrite any existing output files .\\IntuneWinAppUtil.exe -c Deployment -s Install-Msi.ps1 -o Deployment -q You should now have an Install-Msi.intunewin file in your Deployment folder. Create the application deployment in Intune Pull up the Microsoft Endpoint Manager admin center: https://devicemanagement.microsoft.com. Select Apps on the left. Select All Apps and then Add. Select Windows app (Win32) as the App type. Click Select the app package file and navigate the deployment package created in the previous section. Choose an appropriate name, description, publisher, category, etc. and move to the next step. Input your install and uninstall commands in the following pattern: # For the DownloadUrl option: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -downloadUrl \"https://website.com/path/to.msi\" # For the PackagedInstaller option: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -packagedInstaller \"nameof.msi\" # To uninstall: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -uninstall \"name of application\" Choose the appropriate requirements for your application. Choose the appropriate detection rules for the application. File is the quickest and most consistent mechanism in my experience. You can select multiple rules or even create a custom detection script. Choose any dependencies if required (these should already exist as separate deployment packages but dependencies don't need to be assigned to any groups). Assign the application: Required: This will push to the assigned devices/users and will reinstall the application if it no longer meets the detection rules. Available for enrolled device: This makes it available in the Company Portal. Uninstall: Removes the application from the assigned devices/users. Create the deployment.","title":"Create App Deployment Msi"},{"location":"intune/CreateAppDeploymentMsi/index.html#create-intune-app-deployment","text":"","title":"Create Intune App Deployment"},{"location":"intune/CreateAppDeploymentMsi/index.html#windows-msi","text":"","title":"Windows MSI"},{"location":"intune/CreateAppDeploymentMsi/index.html#prerequisites","text":"Access to Windows MSI installer via URL or a local copy","title":"Prerequisites:"},{"location":"intune/CreateAppDeploymentMsi/index.html#determine-distribution-method","text":"Download from web (downloadUrl) This requires a publicly accessible web URL that the MSI package is available at. This allows for the MSI to be updated without needing to rebuild the deployment package. You aren't able to take advantage of some of the features such as Delivery Optimization: https://oliverkieselbach.com/2020/03/07/delivery-optimization-with-intune-and-microsoft-connected-cache-mcc/ Bundled in deployment package (packagedInstaller) This requires the deployment package be build with the MSI in the same directory as the script. Package will need to be recreated on updates. More frequent updates required. You are able to leverage Delivery Optimization.","title":"Determine distribution method:"},{"location":"intune/CreateAppDeploymentMsi/index.html#build-the-deployment-package","text":"Download the script if you don't already from https://raw.githubusercontent.com/zchoate/Intune-Applications/main/Install-Msi.ps1. Invoke-RestMethod -Uri \"https://raw.githubusercontent.com/zchoate/Intune-Applications/main/Install-Msi.ps1\" -OutFile \"$env:UserProfile\\Downloads\\Deployment\\Install-Msi.ps1\" Download the Intune package tool and unzip: https://github.com/microsoft/Microsoft-Win32-Content-Prep-Tool/archive/v1.8.1.zip. This can be saved to any accessible directory. If you're going with the PackagedInstaller option, download your installer and place in the same directory as the Install-Msi.ps1 script. This should only contain these 2 files. Run the Intune package tool in the terminal. You'll need to specify the following information: -c <setup_folder> -s <source_setup_file> -o <output_folder> -q to overwrite any existing output files .\\IntuneWinAppUtil.exe -c Deployment -s Install-Msi.ps1 -o Deployment -q You should now have an Install-Msi.intunewin file in your Deployment folder.","title":"Build the deployment package"},{"location":"intune/CreateAppDeploymentMsi/index.html#create-the-application-deployment-in-intune","text":"Pull up the Microsoft Endpoint Manager admin center: https://devicemanagement.microsoft.com. Select Apps on the left. Select All Apps and then Add. Select Windows app (Win32) as the App type. Click Select the app package file and navigate the deployment package created in the previous section. Choose an appropriate name, description, publisher, category, etc. and move to the next step. Input your install and uninstall commands in the following pattern: # For the DownloadUrl option: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -downloadUrl \"https://website.com/path/to.msi\" # For the PackagedInstaller option: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -packagedInstaller \"nameof.msi\" # To uninstall: Powershell.exe -ExecutionPolicy Bypass -File Install-Msi.ps1 -uninstall \"name of application\" Choose the appropriate requirements for your application. Choose the appropriate detection rules for the application. File is the quickest and most consistent mechanism in my experience. You can select multiple rules or even create a custom detection script. Choose any dependencies if required (these should already exist as separate deployment packages but dependencies don't need to be assigned to any groups). Assign the application: Required: This will push to the assigned devices/users and will reinstall the application if it no longer meets the detection rules. Available for enrolled device: This makes it available in the Company Portal. Uninstall: Removes the application from the assigned devices/users. Create the deployment.","title":"Create the application deployment in Intune"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html","text":"Send GravityForms Submissions to Excel Online Prerequisites: GravityForms Elite subscription Azure subscription Form is already created GravityForms Webhook Addin is already installed Excel spreadsheet with table created in Sharepoint/Teams/OneDrive Creating a Logic App Within the Azure portal, search for Logic App and select the Marketplace option - Logic App. Select the appropriate subscription, resource group (or create a new resource group), create a Logic App name, select the location (region is the default and applies to most situations) and the related datacenter. Assign tags as needed such as company:nameofcompanytobillback. Review and create the resource. Within the resource, you should be prompted to start with a common trigger, select \"When a HTTP request is received\". Save the Logic App design - this should generate your HTTP Post URL to be used later on. Creating a Webhook Feed Within the form editor, navigate to Settings > Webhooks Add a new webhook feed. Select a name for the feed - I would recommend the name of the form. Take the HTTP Post URL from the Logic App setup and paste into the Request URL field. You may need to modify the sp value as shown to remove %2F and replace with / as %2F will cause an error on creation. https://prod.../workflows/.../triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0... to https://prod.../workflows/.../triggers/manual/paths/invoke?api-version=2016-10-01&sp=/triggers/manual/run&sv=1.0... Select your fields that you'd like to include as part of your POST request. You can choose to include All Fields or Select Fields. All Fields will include all visible form fields as well as Entry ID, Source IP, etc. Take note of your Key:Value mappings. Update Settings. Create an Excel Spreadsheet From Teams, Sharepoint, or Onedrive create an Excel spreadsheet that will be the destination of the forms results. Create a table in Excel by navigating to Insert, Table. Give your table headers by selecting the box when initially creating. Add additional columns by selecting the table and pulling to the right. Rename the spreadsheet and any columns as desired. These can be any names that make sense and don't have to match up with the Keys created in the webhook. Logic App JSON Schema We need to build out the Request Body JSON schema to grab the appropriate data. This can be done by using a sample payload (submit a form with just the webhook and look at the Logic App run details to get the payload) or by building out the schema manually. I'll show you how to build out the schema. All of the requests will look largely like this: { \"properties\": { \"KeyName1\": { \"type\": \"string\" }, \"KeyName2\": { \"type\": \"string\" } }, \"type\": \"object\" } \"KeyName1\" would map to KeyName1 and \"KeyName2\" would map to KeyName2. You can use the keys created with the webhook feed to build this list. If the data isn't a string, then you'll need to adjust the type appropriately. Logic App Excel Action Add a new step to the Logic App. Search for \"excel online (business)\" and select the Add a row into a table action. Select the location of your spreadsheet, OneDrive for Business, Teams, or the Sharepoint site. Select the appropriate document library. Navigate to the file using the folder button on the right side of the File field. Select the table name. If it doesn't populate, by default it will be named Table1. Click Add a new parameter and choose the columns you want to add data to when a new row is created. You should now see new fields for each of the respective columns. Click in each field and expand When a HTTP request is received . Select the appropriate value from this list. Save your Logic App and wait for the form submissions to add new rows to your spreadsheet. Note: Runs history will be incredibly helpful in debugging issues and seeing what data is getting passed from point A to B. You can review the raw input and output and see any associated errors.","title":"Send Gravity Forms Submissions to Excel"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#send-gravityforms-submissions-to-excel-online","text":"","title":"Send GravityForms Submissions to Excel Online"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#prerequisites","text":"GravityForms Elite subscription Azure subscription Form is already created GravityForms Webhook Addin is already installed Excel spreadsheet with table created in Sharepoint/Teams/OneDrive","title":"Prerequisites:"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#creating-a-logic-app","text":"Within the Azure portal, search for Logic App and select the Marketplace option - Logic App. Select the appropriate subscription, resource group (or create a new resource group), create a Logic App name, select the location (region is the default and applies to most situations) and the related datacenter. Assign tags as needed such as company:nameofcompanytobillback. Review and create the resource. Within the resource, you should be prompted to start with a common trigger, select \"When a HTTP request is received\". Save the Logic App design - this should generate your HTTP Post URL to be used later on.","title":"Creating a Logic App"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#creating-a-webhook-feed","text":"Within the form editor, navigate to Settings > Webhooks Add a new webhook feed. Select a name for the feed - I would recommend the name of the form. Take the HTTP Post URL from the Logic App setup and paste into the Request URL field. You may need to modify the sp value as shown to remove %2F and replace with / as %2F will cause an error on creation. https://prod.../workflows/.../triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0... to https://prod.../workflows/.../triggers/manual/paths/invoke?api-version=2016-10-01&sp=/triggers/manual/run&sv=1.0... Select your fields that you'd like to include as part of your POST request. You can choose to include All Fields or Select Fields. All Fields will include all visible form fields as well as Entry ID, Source IP, etc. Take note of your Key:Value mappings. Update Settings.","title":"Creating a Webhook Feed"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#create-an-excel-spreadsheet","text":"From Teams, Sharepoint, or Onedrive create an Excel spreadsheet that will be the destination of the forms results. Create a table in Excel by navigating to Insert, Table. Give your table headers by selecting the box when initially creating. Add additional columns by selecting the table and pulling to the right. Rename the spreadsheet and any columns as desired. These can be any names that make sense and don't have to match up with the Keys created in the webhook.","title":"Create an Excel Spreadsheet"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#logic-app-json-schema","text":"We need to build out the Request Body JSON schema to grab the appropriate data. This can be done by using a sample payload (submit a form with just the webhook and look at the Logic App run details to get the payload) or by building out the schema manually. I'll show you how to build out the schema. All of the requests will look largely like this: { \"properties\": { \"KeyName1\": { \"type\": \"string\" }, \"KeyName2\": { \"type\": \"string\" } }, \"type\": \"object\" } \"KeyName1\" would map to KeyName1 and \"KeyName2\" would map to KeyName2. You can use the keys created with the webhook feed to build this list. If the data isn't a string, then you'll need to adjust the type appropriately.","title":"Logic App JSON Schema"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#logic-app-excel-action","text":"Add a new step to the Logic App. Search for \"excel online (business)\" and select the Add a row into a table action. Select the location of your spreadsheet, OneDrive for Business, Teams, or the Sharepoint site. Select the appropriate document library. Navigate to the file using the folder button on the right side of the File field. Select the table name. If it doesn't populate, by default it will be named Table1. Click Add a new parameter and choose the columns you want to add data to when a new row is created. You should now see new fields for each of the respective columns. Click in each field and expand When a HTTP request is received . Select the appropriate value from this list. Save your Logic App and wait for the form submissions to add new rows to your spreadsheet.","title":"Logic App Excel Action"},{"location":"wordpress/SendGravityFormsSubmissionstoExcel/index.html#note","text":"Runs history will be incredibly helpful in debugging issues and seeing what data is getting passed from point A to B. You can review the raw input and output and see any associated errors.","title":"Note:"}]}